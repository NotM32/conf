#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid; do
	if test "$local_oid" = "$zero"; then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"; then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check commit signatures
		echo "→ Checking commit signatures..."
		for commit in $(git rev-list "$range"); do
			sig_status=$(git log --format='%G?' -n 1 "$commit")
			case "$sig_status" in
			G) ;; # good signature
			*)
				echo >&2 "✗ Commit $commit is not GPG signed or has an invalid signature"
				git log -n 1 --format=full "$commit"
				exit 1
				;;
			esac
		done
	fi
done

# Run nix flake check
echo "→ Running nix flake check..."
if ! nix flake check --no-build --accept-flake-config; then
	echo "✗ nix flake check failed."
	exit 1
fi

echo "✓ All commits signed and nix flake check passed."
exit 0
